  p linejs["payload"]["updatedAt"]
aprilf = File.open('/Users/joydeep.paul/Documents/invalid_material_fki_april.json','r')
finalf = File.open('/Users/joydeep.paul/Documents/valid_material_fki_april.json','w')
require 'date'
linejs = JSON.parse(line)
  updatedAt = DateTime.iso8601(linejs["payload"]["updatedAt"])
  updatedAt = updatedAt + 1.days
  p updatedAT
  p updatedAt
aprilf.each do |line|
     linejs = JSON.parse(line)
     updatedAt = DateTime.iso8601(linejs["payload"]["updatedAt"])
     updatedAt = updatedAt + 1
     p updatedAt
aprilf.close
d = DateTime.iso8601('2001-02-03T04:05:06+07:00')
d = DateTime.iso8601('2015-05-17T01:10:42.891011+05:30')
d.to_s
d.methods
d.strftime('%Y-%m-%d %H:%M:%S.%6N').to_s
d.to_iso8601
d.iso8601
     updatedAt = DateTime.iso8601(linejs["payload"]["updatedAt"]).iso8601
     updatedAt = DateTime.iso8601(linej["payload"]["updatedAt"]).iso8601
  p updatedat.iso8601
  newline    = linej
invalid_file.reset
invalid_file.methods
linej = JSON.parse(line)
  p DateTime.iso8601(linej["payload"]["updatedAt"])
end
invalid_file.close
  updatedat  = DateTime.iso8601(linej["payload"]["updatedAt"])
  ingestedat = DateTime.iso8601(linej["payload"]["data"]["ingested_at"])
  p updatedat.to_s
  p ingestedat.strftime('%Y-%m-%d %H:%M:%S.%6N').to_s
  p DateTime.iso8601(linej["payload"]["data"]["ingested_at"])
  p DateTime.parse(linej["payload"]["data"]["ingested_at"])
  p newline.to_json
d = DateTime.parse("2015-05-17T09:58:29+05:30")
d = d + 1
  newline = linej
  updatedat  = updatedat + 1
  ingestedat = ingestedat + 1
  updatedat  = updatedat + 1.minute
  ingestedat = ingestedat + 1.minute
require time
require 'time'
DateTime.now + 1.minute
Time.now + 1.minute
Time.now + 1.minutes
DateTime.now + 1.days
  p newline.inspect
  valid_file.write(newline.to_json)
invalid_file = File.open('/Users/joydeep.paul/Documents/invalid_material_fki_april.json','r')
valid_file   = File.open('/Users/joydeep.paul/Documents/valid_material_fki_april.json','w')
invalid_file.each do |line|
  linej      = JSON.parse(line)
  updatedat  = DateTime.parse(linej["payload"]["updatedAt"])
  ingestedat = DateTime.parse(linej["payload"]["data"]["ingested_at"])
  updatedat  = updatedat + 1.days
  ingestedat = ingestedat + 1.days
  newline = linej.clone
  newline["payload"]["updatedAt"] = updatedat.iso8601
  newline["payload"]["data"]["ingested_at"] = ingestedat.strftime('%Y-%m-%d %H:%M:%S.%6N').to_s
  valid_file.puts(newline.to_json)
 end
 valid_file.close
 invalid_file.close
Seller.find_by_email('joydeep.paul@gmail.com')
game.current_week = 1
game_week.week_number = 1
game_week.status = 'RUNNING'
game = Gameboard.new
game.start_time = Time.now
game.end_time = Time.now + 1
game.save
game_week = GameboardWeekMap.new
game_week.gameboard_id = 1
game_week.status  = 'RUNNING'
game_week.save
gameboard.gameboard_week_maps
game.gameboard_week_maps
game.current_status
reload!
gameboard = Gameboard.find(1)
gwm_old = GameboardWeekMap.find(1)
gwm_old.update_attributes(:status => 'FINISHED')
gwm.gameboard_id = 1
gwm.status = 'RUNNING'
gwm.save
gwm = GameboardWeekMap.new
gwm.gameboard_id = 2
gwm.status = 'PREPARATION'
gameboard.current_status
Gameboard.find(1).select(:status)
Gameboard.find(1).pluck(:status)
Gameboard.find(1)
Gameboard.select(:status).find(1)
exit
